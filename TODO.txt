``cartouche`` TOODs
===================


Registration
------------

- [X] Define "minimal" registration schema using ``deform``.

      * ``email`` is only initially-required fields.

      * Seve a quasi-random token in a persistent mapping, 
        keyed by e-mail address.

      * Redirect to URL with ``email`` in query string.

      * Send confirmation e-mail with token to be cut and pasted into
        the second page.
        
      * Include a link to the confirm page in the mail.

      * Make confirmation URL configurable via Pyramid ``settings``.

- [Xj When token confirmed, add e-mail-confirmed user to ``ZODB`` user store.

      * If an ``IAutoLogin`` utility is configured, use it to auto-login the
        user;  otherwise,  generate a random password and e-mail it to the
        user.

      * Redirect to the "edit account" page by default (configurable
        via the Pyramid ``settings``).


Update Account Login
--------------------

- [X] Update login / password / security question.

      * Allow user to pick login name, defaulting to e-mail address.

      * *If* the existing password is set, **require** it and check it.

      * Allow the user to enter and confirm a password.

      * Hash password using ``zope.password`` utility.

      * Update the security question and answer.

      * Store the updated record both by email and by (new) login;
        remove any record for the old login.

      * Check for uniqueness of login name.

      * Make the "after edit" URL configurable via Pyramid ``settings``.


Login / Logout
--------------

- [X] Implement login view following the ``repoze.who`` 2.0 docs.

      * Compare passwords using ``zope.password`` utility.

      * Link to account recovery view.

      * Link to password reset view.

      * Handle ``came_from`` URLs properly.

      * DO NOT inform the user if there is no matching login.

- [X] Implement logout view following the ``repoze.who`` 2.0 docs.

      * Display a confirmation dialog and require POST.

      * Make after-logout URL configurable via Pyramid ``settings``.


Account Recovery
----------------

- [X] Prompt the user for their e-mail address.

      * On POST, send the user an e-mail reminding them of their login name,
        and redirect to the login view.

      * Make login URL configurable via Pyramid ``settings``.

      * DO NOT tell the user if there is no matching email address.


Password Reset
--------------

- [X] Prompt the user for their login name.

      * On POST without token, generate and seve a quasi-random token
        on the user's record.  Render the form showing the token and
        password fields.

      * Send the user an e-mail containing the token, directing them to
        cut-and-paste it into the view.

      * Include a link to the view in the e-mail.

      * On POST with mismatched token, display an error.

      * On POST with the matching token, if an ``IAutoLogin`` utility is
        configured, use it to auto-login the user;  then redirect to the
        "after reset" URL.
        
      * On POST with the matching token, if no ``IAutoLogin`` utility is
        configured, generate a random password and e-mail it to the user;
        then redirect to the "after reset" URL.

      * Make "after reset" URL configurable via Pyramid ``settings``.

      * DO NOT tell the user if there is no matching login.


``repoze.who`` Authentication Plugin
------------------------------------

- [X] Enable use of real persistent store for ``repoze.who`` API.

      * Prefer a configured ``IPlugins`` adapter, if available.

      * Else use the ``repoze.who.zodbconn`` in the environment, if present.

      * Otherwise, use ``zodb_uri`` from plugin section of who config.


``pyramid`` Authentication Policy
---------------------------------

- [/] Implement interface for use within ``pyramid`` sans ``repoze.who`` m/w.

      * N.B.:  unlike the policy in ``pyramid_who``, do *not* use a
        callback:  instead, use the ``IRegistrations`` adapter to confirm user
        existence, falling back to ``ConfirmedRegistrations(context)``.

      * Add the ZCML directive to configure this policy.

      o Document using the policy.

- [_] Extend ``effective_principals`` to include groups defined in admin UI.


User / Group Administration
---------------------------

- [_] TBD
